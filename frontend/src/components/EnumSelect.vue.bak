<template>
  <el-select 
    v-model="selectedValue" 
    :placeholder="placeholder"
    :clearable="clearable"
    :disabled="disabled"
    :multiple="multiple"
    :loading="loading"
    @change="handleChange"
    @clear="handleClear"
  >
    <template #prefix v-if="showIcon && currentItem">
      <div 
        class="enum-color-indicator"
        :style="{ backgroundColor: currentItem.color }"
      ></div>
    </template>

    <el-option-group
      v-if="grouped"
      v-for="group in groupedOptions"
      :key="group.label"
      :label="group.label"
    >
      <el-option 
        v-for="item in group.options"
        :key="item.code"
        :label="item.zh"
        :value="item.code"
        :disabled="isOptionDisabled(item)"
      >
        <div class="enum-option-content">
          <div class="option-main">
            <div 
              class="enum-color-indicator"
              :style="{ backgroundColor: item.color }"
            ></div>
            <span class="option-label">{{ item.zh }}</span>
          </div>
          <div class="option-meta">
            <el-tag size="small" type="info">{{ item.code }}</el-tag>
          </div>
        </div>
        <div v-if="showDescription && item.description" class="option-description">
          {{ item.description }}
        </div>
      </el-option>
    </el-option-group>

    <el-option 
      v-else
      v-for="item in filteredOptions"
      :key="item.code"
      :label="item.zh"
      :value="item.code"
      :disabled="isOptionDisabled(item)"
    >
      <div class="enum-option-content">
        <div class="option-main">
          <div 
            class="enum-color-indicator"
            :style="{ backgroundColor: item.color }"
          ></div>
          <span class="option-label">{{ item.zh }}</span>
        </div>
        <div class="option-meta">
          <el-tag size="small" type="info">{{ item.code }}</el-tag>
        </div>
      </div>
      <div v-if="showDescription && item.description" class="option-description">
        {{ item.description }}
      </div>
    </el-option>

    <template #empty>
      <div class="enum-select-empty">
        {{ loading ? '加载中...' : '暂无数据' }}
      </div>
    </template>
  </el-select>
</template>

<script setup lang="ts">
import { computed, ref, watch, onMounted } from 'vue'
import EnumService, { type EnumItem, type EnumType } from '@/services/EnumService'
import { useUserStore } from '@/stores/user'

interface Props {
  modelValue: string | string[]
  enumType: EnumType
  placeholder?: string
  clearable?: boolean
  disabled?: boolean
  multiple?: boolean
  excludeCodes?: string[]
  includeCodes?: string[]
  showIcon?: boolean
  showDescription?: boolean
  grouped?: boolean
  groupBy?: 'category' | 'status'
  filterByPermission?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  placeholder: '请选择',
  clearable: true,
  disabled: false,
  multiple: false,
  excludeCodes: () => [],
  includeCodes: () => [],
  showIcon: true,
  showDescription: false,
  grouped: false,
  filterByPermission: true
})

const emit = defineEmits<{
  (e: 'update:modelValue', value: string | string[]): void
  (e: 'change', value: string | string[], item?: EnumItem | EnumItem[]): void
  (e: 'clear'): void
}>()

const userStore = useUserStore()
const loading = ref(false)

const selectedValue = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value)
})

// 获取枚举选项
const enumOptions = computed(() => {
  return EnumService.getEnum(props.enumType)
})

// 过滤选项
const filteredOptions = computed(() => {
  let options = [...enumOptions.value]

  // 包含指定代码
  if (props.includeCodes.length > 0) {
    options = options.filter(item => props.includeCodes.includes(item.code))
  }

  // 排除指定代码
  if (props.excludeCodes.length > 0) {
    options = options.filter(item => !props.excludeCodes.includes(item.code))
  }

  // 权限过滤
  if (props.filterByPermission) {
    options = options.filter(item => {
      if (!item.requiredPermissions || item.requiredPermissions.length === 0) {
        return true
      }
      return item.requiredPermissions.some(permission => 
        userStore.hasPermission(permission)
      )
    })
  }

  // 按顺序排序
  return options.sort((a, b) => a.order - b.order)
})

// 分组选项
const groupedOptions = computed(() => {
  if (!props.grouped) return []

  const groups = new Map<string, EnumItem[]>()
  
  filteredOptions.value.forEach(item => {
    let groupKey = '默认'
    
    if (props.groupBy === 'category') {
      // 根据某个字段分组（需要扩展EnumItem接口）
      groupKey = item.description || '默认'
    } else if (props.groupBy === 'status') {
      // 根据状态类型分组
      if (item.code.includes('ACTIVE') || item.code.includes('APPROVED')) {
        groupKey = '可用状态'
      } else if (item.code.includes('INACTIVE') || item.code.includes('REJECTED')) {
        groupKey = '不可用状态'
      } else {
        groupKey = '其他状态'
      }
    }
    
    if (!groups.has(groupKey)) {
      groups.set(groupKey, [])
    }
    groups.get(groupKey)!.push(item)
  })

  return Array.from(groups.entries()).map(([label, options]) => ({
    label,
    options
  }))
})

// 当前选中项
const currentItem = computed(() => {
  if (props.multiple || !selectedValue.value) return null
  return enumOptions.value.find(item => item.code === selectedValue.value)
})

// 检查选项是否被禁用
const isOptionDisabled = (item: EnumItem) => {
  // 自定义禁用逻辑
  return false
}

// 事件处理
const handleChange = (value: string | string[]) => {
  const items = props.multiple 
    ? enumOptions.value.filter(item => (value as string[]).includes(item.code))
    : enumOptions.value.find(item => item.code === value)
  
  emit('change', value, items)
}

const handleClear = () => {
  emit('clear')
}

// 初始化
onMounted(async () => {
  loading.value = true
  try {
    await EnumService.getEnums()
  } catch (error) {
    console.error('加载枚举配置失败:', error)
  } finally {
    loading.value = false
  }
})

// 监听枚举类型变化
watch(() => props.enumType, async () => {
  loading.value = true
  try {
    await EnumService.getEnums()
  } finally {
    loading.value = false
  }
})
</script>

<style scoped>
.enum-color-indicator {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  display: inline-block;
  margin-right: 6px;
}

.enum-option-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.option-main {
  display: flex;
  align-items: center;
  flex: 1;
}

.option-label {
  margin-left: 4px;
}

.option-meta {
  margin-left: 8px;
}

.option-description {
  color: #909399;
  font-size: 12px;
  margin-top: 4px;
  padding-left: 14px;
}

.enum-select-empty {
  text-align: center;
  padding: 20px;
  color: #909399;
}
</style>